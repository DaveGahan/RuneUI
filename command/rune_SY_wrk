#!/usr/bin/php
<?php
/*
 * Copyright (C) 2013-2014 RuneAudio Team
 * http://www.runeaudio.com
 *
 * RuneUI
 * copyright (C) 2013-2014 - Andrea Coiutti (aka ACX) & Simone De Gregori (aka Orion)
 *
 * RuneOS
 * copyright (C) 2013-2014 - Simone De Gregori (aka Orion) & Carmelo San Giovanni (aka Um3ggh1U)
 *
 * RuneAudio website and logo
 * copyright (C) 2013-2014 - ACX webdesign (Andrea Coiutti)
 *
 * This Program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This Program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RuneAudio; see the file COPYING.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.txt>.
 *
 *  file: command/rune_SY_wrk
 *  version: 1.3
 *  coder: Simone De Gregori
 *
 */
// common include
$start = microtime(true);
ini_set('display_errors', '1');
error_reporting(E_ALL & ~E_NOTICE);
ini_set('error_log', '/var/log/runeaudio/rune_SY_wrk.log');
define('APP', '/srv/http/app/');
include('/srv/http/app/libs/runeaudio.php');

// if os updates are needed
if(file_exists('/srv/http/command/update_os')) 
{
    include '/srv/http/command/update_os';
    updateOS();
}

// test if all services are enabled
$retval = sysCmd('systemctl is-enabled ntpd.service');
if ($retval[0] === 'disabled')
    sysCmd('systemctl enable ntpd.service');
$retval = sysCmd('systemctl is-enabled rune_PL_wrk.service');
if ($retval[0] === 'disabled')
    sysCmd('systemctl enable rune_PL_wrk.service');
$retval = sysCmd('systemctl is-enabled redis.service');
if ($retval[0] === 'disabled')
    sysCmd('systemctl enable redis.service');
$retval = sysCmd('systemctl is-enabled nginx.service');
if ($retval[0] === 'disabled')
    sysCmd('systemctl enable nginx.service');
//$retval = sysCmd('systemctl is-enabled dhcpcd.service');
//if ($retval[0] === 'disabled')
//    sysCmd('systemctl enable dhcpcd.service');

// stop php-fpm
sysCmd('systemctl stop php-fpm');
// setup /run dir
sysCmd('chmod 777 /run');
// Connect to Redis backend
$redis = new Redis();
$redis->connect('/run/redis.sock');

if (FALSE === $redis->get('dynVolumeKnob')) {
    $redis->set('dynVolumeKnob', '1');
}

if (FALSE === $redis->get('usb_db_autorebuild')) {
    $redis->set('usb_db_autorebuild', '1');
}

if (FALSE === $redis->get('mpd_start_volume')) {
    $redis->set('mpd_start_volume', '-1');
}

if (FALSE === $redis->get('mpd_autoplay')) {
    $redis->set('mpd_autoplay', '0');
}

if (FALSE === $redis->get('localSStime')) {
    $redis->set('localSStime', '15');
}

if (FALSE === $redis->get('remoteSStime')) {
    $redis->set('remoteSStime', '-1');
}

if (FALSE === $redis->get('audio_on_off')) {
    $redis->set('audio_on_off', '0');
}

// read activePlayer state
$activePlayer = $redis->get('activePlayer');
if ($activePlayer === 'MPD') {
    // check MPD process
    sysCmd('pgrep -x mpd || systemctl start mpd');
	// ashuffle gets started automatically
} elseif ($activePlayer === 'Spotify') {
    // check MPD process
    sysCmd('pgrep -x spopd || systemctl start spopd');
} else {
    // reset activePlayer state to MPD (default) & check MPD process
    $redis->set('activePlayer', 'MPD');
    sysCmd('pgrep -x mpd || systemctl start mpd');
	// ashuffle gets started automatically
}
// read registered HW architecture
$arch_db = $redis->get('hwplatformid');
runelog('registered architecture: ', $arch_db);
$playerid_db = $redis->get('playerid');
runelog('registered playerid: ', $playerid_db);
// initialize Redis worker data tables
$redis->del('w_lock');
$redis->del('w_queue');
$redis->del('notifications');
// reset worker logfile
sysCmd('echo "--------------- start: rune_SY_wrk.php ---------------" > /var/log/runeaudio/rune_SY_wrk.log');
runelog('WORKER rune_SY_wrk.php STARTING...');
// INITIALIZE ENVIRONMENT --- //
runelog('INITIALIZE ENVIRONMENT ---');
// check Architecture
$arch = wrk_getHwPlatform();
runelog('detected architecture: ', $arch);
if ($arch_db !== $arch) {
    runelog('architecture mismatch: registered HWID: '.$arch_db.' detected: ', $arch);
    // reset playerID if architectureID not match. This condition "fire" another first-run process
    $playerid_db = '';
}
// check git branch
$gitbranch = sysCmd("cd /var/www/ ; git branch | grep \"*\" | cut -d ' ' -f 2");
runelog('GIT BRANCH: ', $gitbranch[0]);
$redis->hSet('git', 'branch', $gitbranch[0]);
if ($playerid_db === '') {
    // RUNEAUDIO FIRST RUN PROCESS --- //
    runelog('>>>>>>RUNEAUDIO FIRST RUN PROCESS ---');
    // reset critical file permissions to default
    runelog('reset critical file permissions to default');
    wrk_sysAcl();
    // register HW architectureID and playerID
    runelog('register HW architectureID and playerID');
    wrk_setHwPlatform($redis);
    // reset netconf to defaults
    runelog('reset netconf to defaults');
    // read system network interfaces details
    wrk_netconfig($redis,'reset');
    // reset sourcecfg to defaults
    runelog('reset sourcecfg to defaults');
    sysCmd('systemctl stop mpd');
	sysCmd('systemctl stop ashuffle');
    wrk_sourcecfg($redis,'reset');
    // reset Webradios
    $redis->del('webradios');
    sysCmd('rm /mnt/MPD/Webradio/*');
    // reconnect to new instance of MPD
    sysCmd('systemctl start mpd');
	// ashuffle gets started automatically
    $mpd = openMpdSocket('/run/mpd.sock', 0);
    // clear MPD database
    sendMpdCommand($mpd,'update');
    sleep(3);
    // reset mpdconf to defaults
    runelog('reset mpdconf to defaults');
    wrk_mpdconf($redis,'reset');
    sleep(1);
    // system ENV files check and replace
        // runelog("system ENV files check and replace",'');
        // wrk_sysEnvCheck($arch,1);
    // reset Redis Player Datastore
    runelog('invoke Redis player datastore reset', sysCmd('/var/www/db/redis_datastore_setup reset'));
    runelog('--- RUNEAUDIO FIRST RUN PROCESS');
    // invoke rune_SY_wrk respawn
    sysCmd('systemctl restart rune_SY_wrk');
    // --- RUNEAUDIO FIRST RUN PROCESS //
} else {
    runelog('--- INITIALIZE ENVIRONMENT');
    // --- INITIALIZE ENVIRONMENT //
    // NORMAL STARTUP --- //
    runelog('NORMAL STARTUP ---');
    // NTP sync
    $start2 = microtime(true);
    $firstlap = $start2-$start;
    //runelog('NTP sync', $redis->get('ntpserver'));
    //wrk_NTPsync($redis->get('ntpserver'));
    $start3 = microtime(true);
    // check HOSTNAME << TODO: integrate in wrk_sysEnvCheck >>
    $hn = sysCmd('hostname');
    wrk_avahiconfig($hn[0]);
    $redis->set('hostname', $hn[0]);
    // check ENV files
    if ($arch !== '--') {
        // wrk_sysOBEnvCheck($arch,0);
    }
    // start samba services
    if ($redis->get('dev') > 0) {
		// dev mode on
		if ($redis->hGet('samba', 'devonoff') > 0) {
			// Samba for dev mode enabled
			runelog("service: SAMBA start (DEV-Mode ON) and Samba Dev enabled");
			// switch smb.conf (development)
			sysCmd('rm /etc/samba/smb.conf');
			sysCmd('ln -s /etc/samba/smb-dev.conf /etc/samba/smb.conf');
			sysCmd('systemctl start smbd');
			sysCmd('pgrep smbd || systemctl start smbd');
			sysCmd('systemctl start nmbd');
			sysCmd('pgrep nmbd || systemctl start nmbd');
		}
    }  else {
		// dev mode off, so prod mode on
		if ($redis->hGet('samba', 'prodonoff') > 0) {
			// Samba for prod mode enabled
			runelog("service: SAMBA start (DEV-Mode OFF) and Samba Prod enabled");
			// switch smb.conf (production)
			sysCmd('rm /etc/samba/smb.conf');
			sysCmd('ln -s /etc/samba/smb-prod.conf /etc/samba/smb.conf');
			sysCmd('systemctl start smbd');
			sysCmd('pgrep smbd || systemctl start smbd');
			sysCmd('systemctl start nmbd');
			sysCmd('pgrep nmbd || systemctl start nmbd');
		}
	}
}
$kernel = $redis->get('kernel');
// load i2smodule
if ($redis->get('i2smodule') !== 'none') {
    switch($arch_db) {
        case '01':
            if ($kernel !== 'linux-rune-3.6.11-18-ARCH+') $loadi2s = true;
            break;
        case '10':
            $loadi2s = true;
            break;
	}
    if ($loadi2s === true) wrk_i2smodule($redis, $redis->get('i2smodule'));
}
// start player backend
if ($activePlayer === 'MPD') {
    sysCmd('pgrep -x mpd || systemctl start mpd');
	// ashuffle gets started automatically
    usleep(500000);
    // set mpd start volume
    $mpd_volume = $redis->get('mpd_start_volume');
    if ($mpd_volume !== '-1') {
        sysCmd('mpc volume '.$mpd_volume);
    }
    // start upmpdcli
    if ($redis->hGet('dlna', 'enable') === '1') {
        runelog("service: UPMPDCLI start");
        sysCmd('systemctl start upmpdcli');
    }
    // start mpdscribble
    if ($redis->hGet('lastfm','enable') === '1') {
        runelog("service: MPDSCRIBBLE start");
        sysCmd('systemctl start mpdscribble');
    }
} elseif ($activePlayer === 'Spotify') {
    sysCmd('systemctl start spopd');
}
// refesh audio hardware status (soundcards and MPD config)
wrk_mpdconf($redis,'refresh');
// start shairport
if ($redis->hGet('airplay', 'enable') === '1') {
    runelog("service: SHAIRPORT start",'');
    sysCmd('systemctl start shairport-sync');
}
// start udevil
if ($redis->get('udevil') === '1') {
    runelog("service: UDEVIL start",'');
    sysCmd('systemctl start udevil');
}
// read system network interfaces details
// wrk_netconfig($redis,'setnics');
// check /etc/network/interfaces integrity
// hashCFG('check_net',$redis);
// check /etc/mpd.conf integrity
// hashCFG('check_mpd',$redis);

// initialize OrionProfile
runelog('env: SET KERNEL PROFILE',$redis->get('orionprofile'));
sysCmd("/var/www/command/orion_optimize.sh ".$redis->get('orionprofile')." ".$redis->get('hwplatformid'));
// start php-fpm
sysCmd('systemctl start php-fpm');
// PHP 5.5 OPCache
if ($redis->get('dev') === '0') {
    // prime PHP OPCache
    runelog('prime PHP OPCache');
    sysCmdAsync("curl -s -X GET 'http://127.0.0.1/command/cachectl.php?action=prime'");
}
runelog('--- NORMAL STARTUP');
// --- NORMAL STARTUP //
$start4 = microtime(true);
$starttime = ($start4-$start3)+$firstlap;
runelog('WORKER rune_SY_wrk.php STARTED in '.$starttime.' seconds.');
ui_notify_async('system worker', 'rune_SY_wrk started in '.$starttime.' seconds.');
// call xinit for local browser
if ($redis->get('local_browser') === '1' && file_exists('/usr/bin/xinit')) {
    sysCmdAsync('systemctl start local-browser.service');
}

// turn wifi power saving off
sysCmd('iwconfig wlan0 power off');

// close startup Redis connection
$redis->close();
// refresh nics status and collect debug data
sysCmdAsync('/var/www/command/refresh_nics ; /var/www/command/debug_collector');
runelog('WORKER MAIN LOOP ---');
// WORKER MAIN LOOP --- //
$all_mounted = 0;
$retries_mounting = 0;
while (1) {
// Connect to Redis backend
$redis->pconnect('/run/redis.sock');
// runelog('[wrk] loop marker ',microtime(true));
    // monitor loop
    if (!empty($redis->hGetAll('w_queue'))) {
        //debug
        runelog('[wrk] there is something for me in the queue! ');
        // switch command queue for predefined jobs
        foreach ($redis->hGetAll('w_queue') as $jobID => $job) {
            runelog('(loop) start job', $jobID);
            // decode redis data
            $job = json_decode($job);
            switch($job->wrkcmd) {
                case 'test':
                    runelog('wrk_SY: ', $job->action);
                    $redis->sAdd('w_lock', $jobID);
                    runelog("testjob: action ", $job->action);
                    runelog("testjob: args[] ", $job->args);
                    // send notfy to UI
                    ui_notify_async('Test', 'text message: jobID='.$jobID, $jobID);
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'airplay':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    if ($job->args !== $redis->hGet('airplay', 'name')) {
                        $redis->hSet('airplay', 'name', $job->args);
                        // update shairport startup config
                        wrk_shairport($redis, $redis->get('ao'), $redis->hGet('airplay', 'name'));
                        $restart = 1;
                    }
                    // start shairport
                    if ($job->action === 'start') {
                        runelog('service: SHAIRPORT start');
                        // start or re-start shairport-sync service
                        if (isset($restart)) {
                            sysCmd('systemctl restart shairport-sync');
                        } else {
                            sysCmd('systemctl start shairport-sync');
                        }
                        $redis->hSet('airplay', 'enable', 1);
                        // send notfy to UI
                        ui_notify_async('AirPlay', 'AirPlay feature enabled', $jobID);
                    }
                    // stop shairport
                    if ($job->action === 'stop') {
                        runelog('service: SHAIRPORT stop');
                        sysCmd('systemctl stop shairport-sync');
                        $redis->hSet('airplay', 'enable', 0);
                        // send notfy to UI
                        ui_notify_async('AirPlay', 'AirPlay feature disabled', $jobID);
                    }
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'backup':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $backup = wrk_backup();
                    $redis->hSet('w_msg', $jobID, $backup);
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'clearimg':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    // Clean IMG
                    runelog('Clean IMG');
                    // enable OPcache
                    wrk_opcache('enable');
                    wrk_cleanDistro();
                    // send notfy to UI
                    ui_notify_async('Clean IMG', 'this image is now clean, ready to publish.', $jobID);
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'debug':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    sysCmd('/var/www/command/debug_collector');
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'dlna':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    if ($job->args !== $redis->hGet('dlna', 'name')) {
                        $redis->hSet('dlna', 'name', $job->args);
                        // update upmpdcli startup config
                        wrk_upmpdcli($redis, $redis->hGet('dlna', 'name'));
                        $restart = 1;
                    }
                    // start upmpdcli
                    if ($job->action === 'start') {
                        runelog('service: UPMPDCLI start');
                        // start or re-start upmpdcli service
                        if (isset($restart)) {
                            sysCmd('systemctl restart upmpdcli');
                        } else {
                            sysCmd('systemctl start upmpdcli');
                        }
                        $redis->hSet('dlna', 'enable', 1);
                        // send notfy to UI
                        ui_notify_async('UPnP / DLNA', 'UPnP / DLNA feature enabled', $jobID);
                    }
                    // stop upmpdcli
                    if ($job->action === 'stop') {
                        runelog('service: UPMPDCLI stop');
                        sysCmd('systemctl stop upmpdcli');
                        $redis->hSet('dlna', 'enable', 0);
                        // send notfy to UI
                        ui_notify_async('UPnP / DLNA', 'UPnP / DLNA feature disabled', $jobID);
                    }
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'gitpull':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    // Update RuneUI
                    runelog('Update RuneUI');
                    // git pull
                    $sysoutput = sysCmd('cd /var/www/ && git pull');
                    sysCmd("curl -s -X GET 'http://localhost/clear'");
                    // send notfy to UI
                    ui_notify_async('Update RuneUI', 'RuneUI updated successfully<br>'.implode('<br>', $sysoutput), $jobID);
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'hostname':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
					ui_notify('Settings - Change Hostname', 'it takes some time .....');
                    wrk_changeHostname($redis, $job->args);
                    $hn = sysCmd('hostname');
                    $redis->set('hostname', $hn[0]);
                    // update hash
                    $hash = md5_file('/etc/mpd.conf');
                    $redis->set('mpdconfhash', $hash);
                    // send notfy to UI
                    ui_notify_async('Hostname', 'Hostname changed to:'.$hn[0], $jobID);
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'i2smodule':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    runelog('env: SET I2S MODULE', $job->args);
                    wrk_i2smodule($redis, $job->args);
                    // send notification
                    // TODO: make a real check!
                    ui_notify_async('I&#178;S kernel module', 'Operation completed', $jobID);
                    // TODO (rework needed)
                    $ao = $redis->get('ao');
                    runelog('env: reenable the current AO', $ao);
                    if ($ao === 'bcm2835 ALSA_1' OR $ao === 'bcm2835 ALSA_2') {
                        sysCmd('mpc enable only "bcm2835 ALSA"');
                    } else {    
                        sysCmd('mpc enable only "'.$ao.'"');
                    }
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'audio_on_off':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    runelog('env: SET dtparam-audio', $job->args);
                    wrk_audio_on_off($redis, $job->args);
                    // send notification
                    // TODO: make a real check!
                    ui_notify_async('Switching onboard audio mode', 'Operation completed', $jobID);
                    // TODO (rework needed)
                    $ao = $redis->get('ao');
                    runelog('env: reenable the current AO', $ao);
                    if ($ao === 'bcm2835 ALSA_1' OR $ao === 'bcm2835 ALSA_2') {
                        sysCmd('mpc enable only "bcm2835 ALSA"');
                    } else {    
                        sysCmd('mpc enable only "'.$ao.'"');
                    }
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'kernelswitch':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock',$jobID);
                    runelog('env: SWITCH KERNEL',$job->args);
                    if (wrk_kernelswitch($redis,$job->args)) {
                        if ($job->args === 'linux-rune-rpi_3.12.13-rt21_wosa') {
                            $redis->set('ao', 'snd_rpi_wsp_1');
                            $redis->set('i2smodule', 'none');
                            $redis->set('orionprofile', 'OrionV2');
                        }
                        $notification = new stdClass();
                        $notification->title = 'Kernel switch';
                        $notification->text = $job->args.' selected successfully, reboot reqired';
                        wrk_notify($redis, 'kernelswitch', $notification, $jobID);
                    }
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'lastfm':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    if ($job->action === 'start') {
                        if ($job->args->user != $redis->hGet('lastfm', 'user') OR $job->args->pass != $redis->hGet('lastfm', 'pass')) {
                        // mpdscribble.conf
                        $file = '/etc/mpdscribble.conf';
                        $newArray = wrk_replaceTextLine($file, '', 'username =', 'username = '.$job->args->user, 'last.fm', 2);
                        $newArray = wrk_replaceTextLine('', $newArray, 'password =', 'password = '.$job->args->pass, 'last.fm', 3);
                        // Commit changes to /etc/mpdscribble.conf
                        $fp = fopen($file, 'w');
                        fwrite($fp, implode("", $newArray));
                        fclose($fp);
                        // write LastFM auth data to Redis datastore
                        setLastFMauth($redis, $job->args);
                        }
                        // check if spotify is configured
                        if ($redis->hGet('spotify','enable') === '1') {
                            // spopd.conf
                            $file = '/etc/spop/spopd.conf';
                            $newArray = wrk_replaceTextLine($file, '', 'username =', 'username = '.$redis->hGet('lastfm','user'), 'api_endpoint', 1);
                            $newArray = wrk_replaceTextLine('', $newArray, 'password =', 'password = '.$redis->hGet('lastfm','pass'), 'api_endpoint', 2);
                            $newArray = wrk_replaceTextLine('', $newArray, 'plugins =', 'plugins = scrobble', '### System settings ###', 2);
                            // commit changes to /etc/spop/spopd.conf
                            $fp = fopen($file, 'w');
                            fwrite($fp, implode("", $newArray));
                            fclose($fp);
                            if ($redis->get('activePlayer') === 'Spotify') {
                                sysCmd('systemctl restart spopd');
                            }
                        }
                        sysCmd('systemctl stop mpdscribble');
                        runelog('service: MPDSCRIBBLE start');
                        sysCmd('systemctl start mpdscribble');
                        // send notfy to UI
                        ui_notify_async('Last.FM scrobbling', 'mpdscribble daemon started', $jobID);
                        $redis->hSet('lastfm', 'enable', 1);
                    }
                    if ($job->action === 'stop') {
                        runelog('service: MPDSCRIBBLE stop');
                        sysCmd('systemctl stop mpdscribble');
                        // check if spotify is configured
                        if ($redis->hGet('spotify','enable') === '1') {
                            // spopd.conf
                            $file = '/etc/spop/spopd.conf';
                            $newArray = wrk_replaceTextLine($file, '', 'plugins =', '#plugins = scrobble', '### System settings ###', 2);
                            // commit changes to /etc/spop/spopd.conf
                            $fp = fopen($file, 'w');
                            fwrite($fp, implode("", $newArray));
                            fclose($fp);
                            sysCmd('systemctl restart spopd');
                        }
                        // send notfy to UI
                        ui_notify_async('Last.FM scrobbling', 'mpdscribble daemon stopped', $jobID);
                        $redis->hSet('lastfm', 'enable', 0);
                    }
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'mpdcfg':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    if ($job->action === 'update') {
                        // send notfy to UI
                        ui_notify_async('MPD', 'configuration updated', $jobID);
                        runelog('args',$job->args);
                        wrk_mpdconf($redis, 'update', $job->args, $jobID);
                        wrk_mpdconf($redis, 'restart');
                    }
                    if ($job->action === 'reset') {
                        wrk_mpdconf($redis, 'reset');
                        wrk_mpdconf($redis, 'restart');
                    }
                    if ($job->action === 'switchao') {
                        wrk_mpdconf($redis, 'switchao', $job->args, $jobID);
                    }
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'mpdcfgman':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    // send notfy to UI
                    ui_notify_async('MPD', 'configuration updated', $jobID);
                    // stop MPD daemon
                    wrk_mpdconf($redis, 'stop');
                    // write mpd.conf file
                    $fh = fopen('/etc/mpd.conf', 'w');
                    fwrite($fh, $job->args);
                    fclose($fh);
                    wrk_mpdconf($redis, 'start');
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'mpdrestart':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    wrk_mpdconf($redis, 'restart');
                    $redis->sRem('w_lock', $jobID);
                    break;
                //case 'ashufflestart':
                    //runelog('wrk_SY: ', $job->wrkcmd);
                    //$redis->sAdd('w_lock', $jobID);
					// shuffle.service has the line: ExecStart=/usr/bin/ashuffle -f /var/lib/mpd/playlists/RandomPlayPlaylist.m3u
					// The hard coded /var/lib/mpd/playlists is set to $redis->hget('mpdconf', 'playlist_directory')
					// This will modify the standard shuffle.service to be able to random play from playlists
					//$file = '/usr/lib/systemd/system/ashuffle.service';
					//$newArray = wrk_replaceTextLine($file, '', 'ExecStart=', 'ExecStart=/usr/bin/ashuffle -f '.$redis->hGet('mpdconf', 'playlist_directory').'/RandomPlayPlaylist.m3u');
					//$fp = fopen($file, 'w');
					//$return = fwrite($fp, implode("", $newArray));
					//fclose($fp);
					// Restart ashuffle if global random ON
					//if ('1' === $redis->get('globalrandom')) {
						//sysCmd('systemctl daemon-reload');
						// ashuffle gets started automatically
					//}
                    //$redis->sRem('w_lock', $jobID);
                    //break;
                case 'ashufflereset':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
					// If it exists, remove the symbolic link which ashuffle uses as a random playlist. ashuffle uses the whole MPD database in it is not present
					sysCmd('rm -f '.$redis->hget('mpdconf', 'playlist_directory').'/RandomPlayPlaylist.m3u');
					// Stop ashuffle
					sysCmd('systemctl stop ashuffle');
					// shuffle.service has the line: ExecStart=/usr/bin/ashuffle -f /var/lib/mpd/playlists/RandomPlayPlaylist.m3u
					// The hard coded /var/lib/mpd/playlists is set to $redis->hget('mpdconf', 'playlist_directory')
					// This will modify the standard shuffle.service to be able to random play from playlists
					$file = '/usr/lib/systemd/system/ashuffle.service';
					$newArray = wrk_replaceTextLine($file, '', 'ExecStart=', 'ExecStart=/usr/bin/ashuffle -f '.$redis->hGet('mpdconf', 'playlist_directory').'/RandomPlayPlaylist.m3u');
					$fp = fopen($file, 'w');
					$return = fwrite($fp, implode("", $newArray));
					fclose($fp);
					// Restart ashuffle if global random ON
					if ('1' === $redis->get('globalrandom')) {
						sysCmd('systemctl daemon-reload');
						// ashuffle gets started automatically
					}
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'pl_ashuffle':
                    runelog('wrk_SY: ', $job->wrkcmd);
					runelog('pl_ashuffle args: ', $job->args);
                    $redis->sAdd('w_lock', $jobID);
					// Make a symbolic link to the selected playlist for random play, ashuffle will use it on startup if it is available
					sysCmd('ln -sf '.$redis->hget('mpdconf', 'playlist_directory').'/'.$job->args.'.m3u '.$redis->hget('mpdconf', 'playlist_directory').'/RandomPlayPlaylist.m3u');
					// Stop ashuffle
					sysCmd('systemctl stop ashuffle');
					// Set global random ON
					$redis->set('globalrandom', '1');
					// ashuffle gets started automatically
                    $redis->sRem('w_lock', $jobID);
                    break;
				case 'sambaprodon':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
					$redis->hSet('samba', 'prodonoff', 1);
					if ($redis->get('dev') > 0) {
						//dev mode
					} else {
						// prod mode
						sysCmd('rm /etc/samba/smb.conf');
						sysCmd('ln -s /etc/samba/smb-prod.conf /etc/samba/smb.conf');
						sysCmd('systemctl start smbd');
						sysCmd('pgrep smbd || systemctl start smbd');
						sysCmd('systemctl start nmbd');
						sysCmd('pgrep nmbd || systemctl start nmbd');
					}
                    $redis->sRem('w_lock', $jobID);
					break;
				case 'sambaprodoff':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
					$redis->hSet('samba', 'prodonoff', 0);
					if ($redis->get('dev') > 0) {
						//dev mode
					} else {
						// prod mode
						sysCmd('systemctl stop smbd');
						sysCmd('systemctl stop nmbd');
					}
                    $redis->sRem('w_lock', $jobID);
					break;
				case 'sambadevon':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
					$redis->hSet('samba', 'devonoff', 1);
					if ($redis->get('dev') > 0) {
						//dev mode
						sysCmd('rm /etc/samba/smb.conf');
						sysCmd('ln -s /etc/samba/smb-dev.conf /etc/samba/smb.conf');
						sysCmd('systemctl start smbd');
						sysCmd('pgrep smbd || systemctl start smbd');
						sysCmd('systemctl start nmbd');
						sysCmd('pgrep nmbd || systemctl start nmbd');
					} else {
						// prod mode
					}
                    $redis->sRem('w_lock', $jobID);
					break;
				case 'sambadevoff':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
					$redis->hSet('samba', 'devonoff', 0);
					if ($redis->get('dev') > 0) {
						//dev mode
						sysCmd('systemctl stop smbd');
						sysCmd('systemctl stop nmbd');
					} else {
						// prod mode
					}
                    $redis->sRem('w_lock', $jobID);
					break;
				case 'sambarestart':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
					sysCmd('systemctl stop smbd');
					sysCmd('systemctl stop nmbd');
					sysCmd('systemctl daemon-reload');
					// restart samba services
					if ($redis->get('dev') > 0) {
						// dev mode on
						if ($redis->hGet('samba', 'devonoff') > 0) {
							// Samba dev mode enabled
							runelog("service: SAMBA restart (DEV-Mode ON) and Samba Dev enabled");
							// switch smb.conf (development)
							sysCmd('rm /etc/samba/smb.conf');
							sysCmd('ln -s /etc/samba/smb-dev.conf /etc/samba/smb.conf');
							sysCmd('systemctl start smbd');
							sysCmd('pgrep smbd || systemctl start smbd');
							sysCmd('systemctl start nmbd');
							sysCmd('pgrep nmbd || systemctl start nmbd');
						}
					}  else {
						// dev mode off, prod mode on
						if ($redis->hGet('samba', 'prodonoff') > 0) {
							// Samba prod mode enabled
							runelog("service: SAMBA restart (DEV-Mode OFF) and Samba Prod enabled");
							// switch smb.conf (production)
							sysCmd('rm /etc/samba/smb.conf');
							sysCmd('ln -s /etc/samba/smb-prod.conf /etc/samba/smb.conf');
							sysCmd('systemctl start smbd');
							sysCmd('pgrep smbd || systemctl start smbd');
							sysCmd('systemctl start nmbd');
							sysCmd('pgrep nmbd || systemctl start nmbd');
						}
					}
                    $redis->sRem('w_lock', $jobID);
					break;
				case 'rerninstall':
				    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
					ui_notify("Rern's Addons", 'it takes some time .....');
					sysCmd('rm -fr /home/rern');
					sysCmd('mkdir -m=777 -p /home/rern');
					sysCmd('rm -f ./install.sh');
					sysCmd('wget -vN https://github.com/rern/RuneAudio_Addons/raw/master/install.sh --output-file=/home/rern/Rern_Addons.log');
					sysCmd('chmod +x -v ./install.sh  >> /home/rern/Rern_Addons.log');
					sysCmd('./install.sh >> /home/rern/Rern_Addons.log');
					$command = sysCmd("grep -v -e '^[[:space:]]*$' /home/rern/Rern_Addons.log | grep -E 'Menu|please'");
					ui_notify("Rern's Addons", preg_replace('/[^A-Za-z0-9- ]/', '', implode("\n", $command)));
					sleep(3);
					ui_notify("Rern's Addons", "You may need to reboot...");
					sleep(1);
					unset($command);
					$redis->sRem('w_lock', $jobID);
					break;
				case 'rernreinstall':
				    runelog('wrk_SY: ', $job->wrkcmd);
					ui_notify("Rern's Addons", 'it takes some time .....');
                    $redis->sAdd('w_lock', $jobID);
					sysCmd('rm -fr /home/rern');
					sysCmd('mkdir -m=777 -p /home/rern');
					sysCmd('rm -f ./install.sh');
					sysCmd('rm -fr /usr/local/bin/uninstall_addo.sh');
					sysCmd('redis-cli del addons addo');
					sysCmd('wget -vN https://github.com/rern/RuneAudio_Addons/raw/master/install.sh --output-file=/home/rern/Rern_Addons.log');
					sysCmd('chmod +x -v ./install.sh  >> /home/rern/Rern_Addons.log');
					sysCmd('./install.sh >> /home/rern/Rern_Addons.log');
					$command = sysCmd("grep -v -e '^[[:space:]]*$' /home/rern/Rern_Addons.log | grep -E 'Menu|please'");
					ui_notify("Rern's Addons", preg_replace('/[^A-Za-z0-9- ]/', '', implode("\n", $command)));
					sleep(3);
					ui_notify("Rern's Addons", "You may need to reboot...");
					sleep(1);
					unset($command);
					$redis->sRem('w_lock', $jobID);
					break;
                case 'xorgserverstart':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
					sysCmd('systemctl start local-browser.service');
					$redis->sRem('w_lock', $jobID);
                case 'xorgserverstop':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
					sysCmd('systemctl stop local-browser.service');
					$redis->sRem('w_lock', $jobID);
                case 'airplayconfreset':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
					sysCmd('cp /var/www/app/config/defaults/shairport-sync.service /usr/lib/systemd/system/shairport-sync.service');
					sysCmd('cp /var/www/app/config/defaults/shairport-sync.conf /etc/shairport-sync.conf');
					wrk_sysAcl();
					$airplay_name = $redis->hGet('airplay', 'name');
					$airplay_enable = $redis->hGet('airplay', 'enable');
					$redis->del('airplay');
					$redis->hSet('airplay', 'name', $airplay_name);
					$redis->hSet('airplay', 'enable', $airplay_enable);
					sysCmd('/var/www/db/redis_datastore_setup check');
					wrk_shairport($redis, $redis->get('ao'), $airplay_name);
					$redis->sRem('w_lock', $jobID);
                case 'netcfg':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    runelog('netcfg action: ', $job->action);
                    runelog('netcfg args: ', $job->args);
                    $redis->sAdd('w_lock', $jobID);
                    // reset network configuration to default
                    if ($job->action === 'reset') {
                        wrk_netconfig($redis,'reset',$job->args);
                        $redis->sRem('w_lock', $jobID);
                    }
                    // write network configuration
                    if ($job->action === 'config') {
                        // send notfy to UI
                        ui_notify('Networkconfiguration', 'it takes some time .....');
                        $retval = wrk_netconfig($redis, 'writecfg', $job->args);
                        $redis->sRem('w_lock', $jobID);
                        // reboot if needed !!!
                        if ($retval === 'reboot') {
                            //$notification = new stdClass();
                            //$notification->title = 'Network config';
                            //$notification->text = 'Config changed successfully, reboot reqired';
                            //wrk_notify($redis, 'kernelswitch', $notification, $jobID);
                            sysCmd('/var/www/command/rune_shutdown reboot');
                            sysCmdAsync('systemctl reboot');
                            //$redis->sRem('w_lock', $jobID);
                        }
                    }
                    // refresh network configuration
                    if ($job->action === 'refresh') {
                        sysCmd('/var/www/command/refresh_nics');
                        $redis->sRem('w_lock', $jobID);
                    }
                    // manual network configuration
                    if ($job->action === 'manual') {
                        // wrk_netconfig($redis,'manual',$job->args);
                        $redis->sRem('w_lock', $jobID);
                    }
                    break;
                case 'apcfg':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    runelog('apcfg action: ', $job->action);
                    runelog('apcfg args: ', $job->args);
                    $redis->sAdd('w_lock', $jobID);
                    // reset accesspoint configuration to default
                    if ($job->action === 'reset') {
						// Need to test the following
                        // $redis->Del('AccessPoint');
						// sysCmd('/var/www/command/refresh_nics');
                        $redis->sRem('w_lock', $jobID);
                    }
                    // write network configuration
                    if ($job->action === 'config') {
                        // send notfy to UI
                        ui_notify('AccessPoint configuration', 'it takes some time .....');
                        $retval = wrk_apconfig($redis, 'writecfg', $job->args);
                        $redis->sRem('w_lock', $jobID);
                        // reboot if needed !!!
                        if ($retval === 'reboot') {
                            $notification = new stdClass();
                            $notification->title = 'AccessPoint config';
                            $notification->text = 'Config changed successfully, reboot reqired';
                            wrk_notify($redis, 'kernelswitch', $notification, $jobID);
                            sysCmd('/var/www/command/rune_shutdown reboot');
                            sysCmdAsync('systemctl reboot');
                        }
                    }
                    break;
                case 'ntpserver':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    $redis->set('ntpserver', wrk_NTPsync($job->args));
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'opcache':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    // Restart PHP service
                    if ($job->action === 'enable') {
                        wrk_opcache('enable', $redis);
                        runelog('PHP 5.5 OPcache enabled');
                        sysCmdAsync('systemctl restart php-fpm', 5);
                        // wrk_opcache('forceprime');
                        // send notfy to UI
                        ui_notify_async('PHP OpCache', 'cache enabled', $jobID);
                    } else {
                        wrk_opcache('disable', $redis);
                        runelog('PHP 5.5 OPcache disabled');
                        sysCmdAsync('systemctl restart php-fpm', 5);
                        // send notfy to UI
                        ui_notify_async('PHP OpCache', 'cache disabled', $jobID);
                    }
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'orionprofile':
                runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    $profile = $job->args." ".$redis->get('hwplatformid');
                    runelog("env: SET KERNEL PROFILE", $job->args);
                    sysCmd("/var/www/command/orion_optimize.sh ".$profile);
                    $redis->set('orionprofile', $job->args);
                    ui_notify_async('SoundSignature', 'Profile '.$profile.' applied', $jobID);
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'phprestart':
                runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    sysCmd('systemctl restart php-fpm');
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'poweroff':
                runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
					// save the playback status
					wrk_mpdPlaybackStatus($redis);
                    // send notfy to UI
                    ui_notify_async('Shutdown', 'system shutdown in progress...', $jobID);
                    sysCmd('/var/www/command/rune_shutdown poweroff');
                    sysCmdAsync('poweroff');
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'reboot':
                runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
					// save the playback status
					wrk_mpdPlaybackStatus($redis);
                    // send notfy to UI
                    ui_notify_async('Reboot', 'system reboot in progress...', $jobID);
                    sysCmd('/var/www/command/rune_shutdown reboot');
                    sysCmdAsync('reboot');
                    $redis->sRem('w_lock', $jobID);
                    break;
				case 'display_off':
                runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    sysCmd('export DISPLAY=:0; xset dpms force off');
                    $redis->sRem('w_lock', $jobID);
                    break;
                // case 'restore':
                    // runelog('wrk_SY: ', $job->wrkcmd);
                    // wrk_restore("/run/".$job->args);
                    // $redis->sRem('w_lock', $jobID);
                    // break;
                case 'spotify':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    if ($job->action === 'start') {
                        if ($job->args->user !== $redis->hGet('spotify', 'user') OR $job->args->pass !== $redis->hGet('spotify', 'pass')) {
                        // spopd.conf
                        $file = '/etc/spop/spopd.conf';
                        $newArray = wrk_replaceTextLine($file, '', 'spotify_username =', 'spotify_username = '.$job->args->user, '### Spotify auth settings ###', 2);
                        $newArray = wrk_replaceTextLine('', $newArray, 'spotify_password =', 'spotify_password = '.$job->args->pass, '### Spotify auth settings ###', 3);
                        // check if last.fm is configured
                        if ($redis->hGet('lastfm','enable') === '1') {
                            $newArray = wrk_replaceTextLine('', $newArray, 'username =', 'username = '.$redis->hGet('lastfm','user'), 'api_endpoint', 1);
                            $newArray = wrk_replaceTextLine('', $newArray, 'password =', 'password = '.$redis->hGet('lastfm','pass'), 'api_endpoint', 2);
                            $newArray = wrk_replaceTextLine('', $newArray, 'plugins =', 'plugins = scrobble', '### System settings ###', 2);
                        } else {
                            $newArray = wrk_replaceTextLine('', $newArray, 'username =', '#username = user', 'api_endpoint', 1);
                            $newArray = wrk_replaceTextLine('', $newArray, 'password =', '#password = pass', 'api_endpoint', 2);
                            $newArray = wrk_replaceTextLine('', $newArray, 'plugins =', '#plugins = scrobble', '### System settings ###', 2);
                        }
                        // commit changes to /etc/spop/spopd.conf
                        $fp = fopen($file, 'w');
                        fwrite($fp, implode("", $newArray));
                        fclose($fp);
                        // write Spotify auth data to Redis datastore
                        $redis->hSet('spotify', 'user', $job->args->user);
                        $redis->hSet('spotify', 'pass', $job->args->pass); 
                        }
                        if ($redis->get('activePlayer') === 'Spotify') {
                            sysCmd('systemctl stop spopd');
                            runelog('service: SPOPD start');
                            sysCmd('systemctl start spopd');
                        }
                        // send notfy to UI
                        ui_notify_async('Spotify', 'Spotify client configured', $jobID);
                        $redis->hSet('spotify', 'enable',  1);
                    }
                    if ($job->action === 'stop') {
                        runelog('service: SPOPD stop');
                        sysCmd('systemctl stop spopd');
                        // send notfy to UI
                        ui_notify_async('Spotify', 'Spotify client stopped', $jobID);
                        $redis->hSet('spotify', 'enable',  0);
                    }
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'sourcecfg':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    if (wrk_sourcecfg($redis, $job->action,$job->args)) sysCmd('mpc update');
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'switchplayer':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    if (wrk_switchplayer($redis, $job->args)) {
                        ui_notify_async('Switch Player Engine', 'Current active player engine: '.$job->args, $jobID);
                    }
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'sysAcl':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    wrk_sysAcl();
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'timezone':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    sysCmd('timedatectl set-timezone '.$job->args);
                    $redis->set('timezone', $job->args);
                    ui_notify_async('Timezone', 'Timezone updated.<br>Current timezone: '.$job->args, $jobID);
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'udevil':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    if ($job->action === 'start') {
                    runelog('service: UDEVIL start');
                    sysCmd('systemctl start udevil');
                    $redis->set('udevil', 1);
                    ui_notify_async('USB-Auto', 'USB-Automount feature enabled', $jobID);
                    }
                    if ($job->action === 'stop') {
                    runelog('service: UDEVIL stop');
                    sysCmd('systemctl stop udevil');
                    $redis->set('udevil', 0);
                    ui_notify_async('USB-Auto', 'USB-Automount feature disabled', $jobID);
                    }
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'webradio':
                runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock', $jobID);
                    $mpd = openMpdSocket('/run/mpd.sock');
                    if ($job->action === 'add') {
                        runelog('service: WEBRADIO add');
                        if (addRadio($mpd, $redis,$job->args)) {
                            ui_notify_async('Webradio', $job->args->label.' added to the library', $jobID);
                        }
                    }
                    if ($job->action === 'edit') {
                        runelog('service: WEBRADIO edit');
                        if (editRadio($mpd, $redis ,$job->args)) {
                            ui_notify_async('Webradio', $job->args->label.' modified succesfully', $jobID);
                        }
                    }
                    if ($job->action === 'delete') {
                        runelog('service: WEBRADIO delete');
                        if (deleteRadio($mpd, $redis, $job->args)) {
                            ui_notify_async('Webradio', $job->args->label.' deleted', $jobID);
                        }
                    }
                    ui_libraryHome($redis, $clientUUID);
                    closeMpdSocket($mpd);
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'wificfg':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    $redis->sAdd('w_lock',$jobID);
                    // add profile
                    if ($job->action === 'add') {
                        runelog('wificfg: add profile for SSID: '.$job->args->ssid);
                        ui_notify_async('Adding WIFI-Profile', $job->args->ssid, $jobID);
                        wrk_wifiprofile($redis, 'add', $job->args);
                        ui_notify_async('Added WIFI-Profile', $job->args->ssid, $jobID);
                    }
                    if ($job->action === 'edit') {
                        runelog('wificfg: edit profile for SSID: '.$job->args->ssid);
                        ui_notify_async('Changing WIFI-Profile', $job->args->ssid, $jobID);
                        wrk_wifiprofile($redis, 'edit', $job->args);
                        ui_notify_async('Changed WIFI-Profile', $job->args->ssid, $jobID);
                    }
                    if ($job->action === 'delete') {
                        runelog('wificfg: delete profile for SSID: '.$job->args->ssid);
                        ui_notify_async('Deleting WIFI-Profile', $job->args->ssid, $jobID);
                        wrk_wifiprofile($redis, 'delete', $job->args);
                        ui_notify_async('Deleted WIFI-Profile', $job->args->ssid, $jobID);
                    }
                    if ($job->action === 'disconnect') {
                        runelog('wificfg: disconnect profile for SSID: '.$job->args->ssid);
                        ui_notify_async('Disconnecting from WIFI-Profile', $job->args->ssid, $jobID);
                        wrk_wifiprofile($redis, 'disconnect', $job->args);
                        ui_notify_async('Disconnected from WIFI-Profile', $job->args->ssid, $jobID);
                    }
                    if ($job->action === 'connect') {
                        runelog('wificfg: connect profile for SSID: '.$job->args->ssid);
                        ui_notify_async('Connecting to WIFI-Profile', $job->args->ssid, $jobID);
                        wrk_wifiprofile($redis, 'connect', $job->args);
                        ui_notify_async('Connected to WIFI-Profile', $job->args->ssid, $jobID);
                    }
                    // inject random delay to avoid wifi scan overlapping
                    if ($job->action === 'scan') {
                        // random delay
//                        $sleep = rand(1000000, 2000000);
//                        usleep($sleep);
//                        $lock = $redis->Get('lock_wifiscan');
                    }
                    if ($job->action === 'scan') {
                        $lock = $redis->Get('lock_wifiscan');
                        if ($lock !== '1') {
                            runelog('wificfg: scan ');
                            // refresh nics status
                            sysCmdAsync('/var/www/command/refresh_nics');
                        } else {
                            runelog('wificfg: scan aborted. System locked, scan in progress.');
                        }
                    }
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'wrkrestart':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    // restart worker
                    sysCmd('systemctl restart '.$job->args);
                    $redis->sRem('w_lock', $jobID);
                    break;
                case 'ui_notify':
                    runelog('wrk_SY: ', $job->wrkcmd);
                    // TODO: rework needed (fix bug in /var/www/index.php)
                    if (!isset($job->delay_us)) {
                        $job->delay_us = 650000;
                    }
                    runelog('delay_us '.$job->delay_us);
                    usleep($job->delay_us);
                    // send notify to RuneUI
                    foreach ($job->args as $raw_notification) {
                        wrk_notify($redis, 'raw', $raw_notification);
                    }
                    $redis->sRem('w_lock', $jobID);
                    break;
            } // end switch
            // delete processed job from the w_queue
            $redis->hDel('w_queue', $jobID);
            // emit endjob notification
            wrk_notify($redis, 'endjob', '', $jobID);
            runelog('(loop) delete job_queue', $jobID);
        } // end foreach loop
    } // end if loop
    // mount all sources
    if ($all_mounted === 0) {
        runelog('wrk_SY: try to mount all shares!');
        $all_mounted = wrk_sourcemount($redis, 'mountall');
        if ($retries_mounting > 20) {
            $all_mounted = 1;
        }
        if ($all_mounted === 1) {
            runelog('wrk_SY: all shares mounted successfully!');
            // start play if enabled
            if ($redis->get('mpd_autoplay') === '1') {
				$redis->set('mpd_playback_laststate', 'playing');
				wrk_mpdRestorePlayerStatus($redis);
            }
        } else {
            $retries_mounting++;
            runelog('wrk_SY: error mounting shares, try it again! Count: '.$retries_mounting);
            usleep(500000);
        }
    }
	// start Global Random if enabled - check continually ashuffle get stopped for lots of reasons
	// this is the only place where ashuffle it is started
	if ('1' === $redis->get('globalrandom') && ($redis->get('ashuffle_wait_for_play') === '0')) {
		// seems to be a bug somewhere in MPD
		// if ashuffle is started too quickly it loads many many (far TOO many) songs in the queue before MPD gets round to start playing one
		// wait until mpd has been running for a while before starting ashuffle
		$mpd_uptime = trim(reset(sysCmd('ps -C mpd -o etimes=')));
		if (intval($mpd_uptime) > intval($redis->get('ahuffle_start_delay'))) {
			sysCmd('pgrep -x ashuffle || systemctl start ashuffle');
		}
	}
    // unload CPU
    usleep(500000);
} // end while loop
// --- WORKER MAIN LOOP //
// close Redis connection
$redis->close();
